# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  issues:
    types: [opened, edited, reopened]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read
  issues: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Check Issue Title And Post Comment
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = context.payload.issue.title;
            if (!title.includes(':')) {
              console.log('sync issue title is valid');
              core.setFailed('Issue title should contains `:`');
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Issue title is valid, start to copy image.'
            });

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Aliyun Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.ALIYUN_DOCKER_ADDRESS }}
          username: ${{ vars.ALIYUN_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}    
      
      - name: Push image to Aliyun
        run: |
          docker buildx imagetools create \
            --tag ${{ vars.ALIYUN_DOCKER_ADDRESS }}/${{ vars.MIRROR_NAMESPACE }}/${{ github.event.issue.title }} \
            ${{ github.event.issue.title }}          

  handle-failed:
    needs: build
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Replay and close issue
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const logUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Failed to copy images, please check the [log](' + logUrl + ') for more details.
            });
            github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed'
            });

  handle-success:
    needs: build
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Replay and close issue
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const mirrorAddr = `${{ vars.ALIYUN_DOCKER_ADDRESS }}/${{ vars.MIRROR_NAMESPACE }}/${{ github.event.issue.title }}`
            const cmdDockerPull = `docker pull ${mirrorAddr}`
            const cmdDockerTag = `docker tag ${mirrorAddr} ${{ github.event.issue.title }}`
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: ' Image has been copied, you can pull it by running the following commands:\n\n```shell\n' + cmdDockerPull + '\n' + cmdDockerTag + '\n``` '
            });
            github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed'
            });